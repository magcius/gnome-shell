#!@PYTHON@
# -*- mode: Python; indent-tabs-mode: nil; -*-

import os
import re
import dbus
import subprocess
import sys
import optparse
import tempfile
import zipfile
try:
    import json
except ImportError:
    try:
        import simplejson as json
    except ImportError:
        print 'The Python simplejson module is required'
        sys.exit(1)

XDG_DATA_HOME = os.environ.get('XDG_DATA_HOME', os.path.join(os.path.expanduser('~/.local'), 'share'))
EXTENSIONS_DIR = os.path.join(XDG_DATA_HOME, 'gnome-shell', 'extensions')

def create_extension():
    print
    print '''Name should be a very short (ideally descriptive) string.
Examples are: "Click To Focus",  "Adblock", "Shell Window Shrinker".
'''
    name = raw_input('Name: ').strip()
    print
    print '''Description is a single-sentence explanation of what your extension does.
Examples are: "Make windows visible on click", "Block advertisement popups"
              "Animate windows shrinking on minimize"
'''
    description = raw_input('Description: ').strip()
    underifier = re.compile('[^A-Za-z]')
    sample_uuid = underifier.sub('_', name)
    # TODO use evolution data server
    hostname = subprocess.Popen(['hostname'], stdout=subprocess.PIPE).communicate()[0].strip()
    sample_uuid = sample_uuid + '@' + hostname

    print
    print '''Uuid is a globally-unique identifier for your extension.
This should be in the format of an email address (foo.bar@extensions.example.com), but
need not be an actual email address, though it's a good idea to base the uuid on your
email address.  For example, if your email address is janedoe@example.com, you might
use an extension title clicktofocus@janedoe.example.com.'''
    uuid = raw_input('Uuid [%s]: ' % (sample_uuid, )).strip()
    if uuid == '':
        uuid = sample_uuid

    extension_path = os.path.join(extensiondir, uuid)
    if os.path.exists(extension_path):
        print "Extension path %r already exists" % (extension_path, )
        sys.exit(0)
    os.makedirs(extension_path)
    meta = { 'name': name,
             'description': description,
             'uuid': uuid,
             'shell-version': ['@VERSION@'] }
    f = open(os.path.join(extension_path, 'metadata.json'), 'w')
    try:
        json.dump(meta, f)
    except AttributeError:
        # For Python versions older than 2.6, try using the json-py module
        f.write(json.write(meta) + '\n')
    f.close()

    extensionjs_path = os.path.join(extension_path, 'extension.js')
    f = open(extensionjs_path, 'w')
    f.write('''// Sample extension code, makes clicking on the panel show a message
const St = imports.gi.St;
const Mainloop = imports.mainloop;

const Main = imports.ui.main;

function _showHello() {
    let text = new St.Label({ style_class: 'helloworld-label', text: "Hello, world!" });
    let monitor = global.get_primary_monitor();
    global.stage.add_actor(text);
    text.set_position(Math.floor (monitor.width / 2 - text.width / 2), Math.floor(monitor.height / 2 - text.height / 2));
    Mainloop.timeout_add(3000, function () { text.destroy(); });
}

// Put your extension initialization code here
function main() {
    Main.panel.actor.reactive = true;
    Main.panel.actor.connect('button-release-event', _showHello);
}
''')
    f.close()

    f = open(os.path.join(extension_path, 'stylesheet.css'), 'w')
    f.write('''/* Example stylesheet */
.helloworld-label {
    font-size: 36px;
    font-weight: bold;
    color: #ffffff;
    background-color: rgba(10,10,10,0.7);
    border-radius: 5px;
}
''')
    f.close()

    print "Created extension in %r" % (extension_path, )
    subprocess.Popen(['gnome-open', extensionjs_path])

def install_extension(filename):

    try:
        z = zipfile.ZipFile(filename)
    except zipfile.BadZipfile:
        print >> sys.stderr, "Invalid extension, format is not ZIP file"
        sys.exit(2)

    try:
        metadatafile = z.open('metadata.json', 'r')
    except KeyError:
        z.close()
        print >> sys.stderr, "Invalid extension, missing metadata.json"
        sys.exit(2)
    
    try:
        metadata = json.load(metadatafile)
    except ValueError, e:
        metadatafile.close()
        z.close()
        print >> sys.stderr, "Invalid extension, not well-formed metadata.json"
        print >> sys.stderr, e
        sys.exit(2)

    metadatafile.close()

    if 'uuid' not in metadata:
        z.close()
        print >> sys.stderr, "Invalid extension, 'uuid' missing from metadata.json"
        sys.exit(2)

    extension_dir = os.path.join(EXTENSIONS_DIR, metadata['uuid'])

    z.extract(extension_dir)
    z.close()

    try:
        bus = dbus.SessionBus()
        proxy = bus.get_object("org.gnome.Shell",
                               "/org/gnome.Shell")
        iface = dbus.Interface(proxy, dbus_interface="org.gnome.Shell")
        iface.EnableExtension("uuid")
    except dbus.exceptions.DBusException, e:
        print >> sys.stderr, "Error enabling extension"
        print >> sys.stderr, e
        sys.exit(3)

parser = optparse.OptionParser()
parser.add_option("-c", "--create-extension", action="store_true",
                  help="Create a new GNOME Shell extension")
parser.add_option("-i", "--install-extension", metavar="FILE",
                  dest="filename", help="Install a GNOME Shell extension")

options, args = parser.parse_args()

if options.create_extension:
    create_extension()

if options.filename:
    install_extension(options.filename)
